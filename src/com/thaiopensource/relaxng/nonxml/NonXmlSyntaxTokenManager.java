/* Generated By:JavaCC: Do not edit this line. NonXmlSyntaxTokenManager.java */
package com.thaiopensource.relaxng.nonxml;
import java.util.Hashtable;
import java.util.Enumeration;
import java.util.Vector;

public class NonXmlSyntaxTokenManager implements NonXmlSyntaxConstants
{
  int tagLevel;
private final int jjStopStringLiteralDfa_4(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0, long active1)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 39:
         return jjStopAtPos(0, 69);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x7fffffff00ffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xf000000L
};
static final long[] jjbitVec5 = {
   0x0L, 0x0L, 0x0L, 0xf0000000L
};
static final long[] jjbitVec6 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_4(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 27;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffd9ffL & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                  }
                  if ((0xffffffff00002600L & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                  }
                  if ((0x1000004000000000L & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  if (curChar == 38)
                     jjAddStates(0, 1);
                  if (curChar == 38)
                     jjAddStates(2, 5);
                  break;
               case 1:
                  if ((0xffffffff00002600L & l) != 0L && kind > 71)
                     kind = 71;
                  break;
               case 4:
                  if (curChar == 38)
                     jjAddStates(2, 5);
                  break;
               case 6:
                  if (curChar == 59 && kind > 74)
                     kind = 74;
                  break;
               case 18:
                  if ((0xffffffffffffd9ffL & l) != 0L && kind > 85)
                     kind = 85;
                  break;
               case 19:
                  if (curChar == 38)
                     jjAddStates(0, 1);
                  break;
               case 20:
                  if (curChar == 35)
                     jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 22:
                  if (curChar == 59 && kind > 72)
                     kind = 72;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(6, 7);
                  break;
               case 25:
                  if (curChar == 59 && kind > 73)
                     kind = 73;
                  break;
               case 26:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 85)
                     kind = 85;
                  if (kind > 71)
                     kind = 71;
                  break;
               case 1:
                  if (kind > 71)
                     kind = 71;
                  break;
               case 5:
                  if (curChar == 116)
                     jjCheckNAdd(6);
                  break;
               case 7:
                  if (curChar == 108)
                     jjCheckNAdd(5);
                  break;
               case 8:
                  if (curChar == 103)
                     jjCheckNAdd(5);
                  break;
               case 9:
                  if (curChar == 111)
                     jjCheckNAdd(5);
                  break;
               case 10:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 97)
                     jjAddStates(8, 9);
                  break;
               case 13:
                  if (curChar == 112)
                     jjCheckNAdd(6);
                  break;
               case 14:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 115)
                     jjCheckNAdd(6);
                  break;
               case 16:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (kind > 85)
                     kind = 85;
                  break;
               case 23:
                  if (curChar == 120)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 71)
                        kind = 71;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 3;
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 85)
                        kind = 85;
                  }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 71)
                     kind = 71;
                  break;
               case 2:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 71)
                     kind = 71;
                  break;
               case 18:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 85)
                     kind = 85;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 27 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 85;
            return -1;
         }
         if ((active0 & 0x1f3c481f6L) != 0L)
         {
            jjmatchedKind = 56;
            return 35;
         }
         return -1;
      case 1:
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x1f3c481f6L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 1;
            return 35;
         }
         return -1;
      case 2:
         if ((active0 & 0x1f3c481f6L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 2;
            return 35;
         }
         return -1;
      case 3:
         if ((active0 & 0x400080L) != 0L)
            return 35;
         if ((active0 & 0x1f3848176L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 3;
            return 35;
         }
         return -1;
      case 4:
         if ((active0 & 0x102800040L) != 0L)
            return 35;
         if ((active0 & 0xf1048136L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 4;
            return 35;
         }
         return -1;
      case 5:
         if ((active0 & 0xc0000000L) != 0L)
            return 35;
         if ((active0 & 0x31048136L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 5;
            return 35;
         }
         return -1;
      case 6:
         if ((active0 & 0x11008014L) != 0L)
            return 35;
         if ((active0 & 0x20040122L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 6;
            return 35;
         }
         return -1;
      case 7:
         if ((active0 & 0x20040122L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 7;
            return 35;
         }
         return -1;
      case 8:
         if ((active0 & 0x20000100L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 8;
            return 35;
         }
         if ((active0 & 0x40022L) != 0L)
            return 35;
         return -1;
      case 9:
         if ((active0 & 0x100L) != 0L)
            return 35;
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 9;
            return 35;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 32:
         return jjStopAtPos(0, 36);
      case 38:
         jjmatchedKind = 10;
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 40:
         return jjStopAtPos(0, 19);
      case 41:
         return jjStopAtPos(0, 20);
      case 42:
         return jjStopAtPos(0, 14);
      case 43:
         return jjStopAtPos(0, 12);
      case 44:
         return jjStopAtPos(0, 11);
      case 45:
         return jjStopAtPos(0, 21);
      case 61:
         return jjStopAtPos(0, 3);
      case 62:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 63:
         return jjStopAtPos(0, 13);
      case 91:
         return jjStopAtPos(0, 33);
      case 93:
         return jjStopAtPos(0, 34);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x24L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x20008040L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x10000010L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x102L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x82000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x100000080L);
      case 123:
         return jjStopAtPos(0, 16);
      case 124:
         jjmatchedKind = 9;
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 125:
         return jjStopAtPos(0, 17);
      case 65279:
         return jjStopAtPos(0, 61);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         break;
      case 62:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000022L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x84L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000010L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000100L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x82040000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x4L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x10L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x2L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x20040120L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x800080L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x24L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x160800012L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x1008000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x2040000L);
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 35);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 35);
         break;
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 35);
         return jjMoveStringLiteralDfa5_0(active0, 0xc0000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000010L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x2L);
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 35);
         return jjMoveStringLiteralDfa5_0(active0, 0x20L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000004L);
      case 121:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 6, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 103:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 35);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x10L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x104L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x20008000L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x2L);
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 35);
         break;
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000002L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 35);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x20L);
      case 114:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 35);
         break;
      case 116:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 2, 35);
         else if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 4, 35);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 15, 35);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x2L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x20L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000L);
      case 119:
         return jjMoveStringLiteralDfa8_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L);
      case 101:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(8, 1, 35);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(8, 18, 35);
         return jjMoveStringLiteralDfa9_0(active0, 0x100L);
      case 115:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(8, 5, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(9, 8, 35);
         break;
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(10, 29, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static final long[] jjbitVec7 = {
   0x0L, 0xffffffffffffc000L, 0xfffff0007fffffffL, 0x7fffffL
};
static final long[] jjbitVec8 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec9 = {
   0x7ff3ffffffffffffL, 0x7ffffffffffffdfeL, 0xffffffffffffffffL, 0xfc31ffffffffe00fL
};
static final long[] jjbitVec10 = {
   0xffffffL, 0xffffffffffff0000L, 0xf80001ffffffffffL, 0x3L
};
static final long[] jjbitVec11 = {
   0x0L, 0x0L, 0xfffffffbffffd740L, 0xffffd547f7fffL
};
static final long[] jjbitVec12 = {
   0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff0003L, 0x33fcfffffff199fL
};
static final long[] jjbitVec13 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0x7fL, 0x707ffffff0000L
};
static final long[] jjbitVec14 = {
   0x7fffffe00000000L, 0xfffe0000000007feL, 0x7cffffffffffffffL, 0x60002f7fffL
};
static final long[] jjbitVec15 = {
   0x23ffffffffffffe0L, 0x3ff000000L, 0x3c5fdfffff99fe0L, 0x30003b0000000L
};
static final long[] jjbitVec16 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100000000L
};
static final long[] jjbitVec17 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec18 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec19 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x0L, 0x0L
};
static final long[] jjbitVec20 = {
   0xd7ffffffffffeL, 0x3fL, 0x200d6caefef02596L, 0x1fL
};
static final long[] jjbitVec21 = {
   0x0L, 0x3fffffffeffL, 0x0L, 0x0L
};
static final long[] jjbitVec22 = {
   0x0L, 0x0L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec23 = {
   0x500000000007daedL, 0x2c62ab82315001L, 0xf580c90040000000L, 0x201080000000007L
};
static final long[] jjbitVec24 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec25 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec26 = {
   0x4c4000000000L, 0x0L, 0x7L, 0x0L
};
static final long[] jjbitVec27 = {
   0x3fe00000080L, 0xfffffffffffffffeL, 0xfffffffe001fffffL, 0x7ffffffffffffffL
};
static final long[] jjbitVec28 = {
   0x1fffffffffe0L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec29 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec30 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec31 = {
   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec32 = {
   0xffffffL, 0xffffffffffff0000L, 0xf80001ffffffffffL, 0x30003L
};
static final long[] jjbitVec33 = {
   0xffffffffffffffffL, 0x30000003fL, 0xfffffffbffffd7c0L, 0xffffd547f7fffL
};
static final long[] jjbitVec34 = {
   0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff007bL, 0x33fcfffffff199fL
};
static final long[] jjbitVec35 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe007fL, 0x707ffffff0016L
};
static final long[] jjbitVec36 = {
   0x7fffffe00000000L, 0xffff03ff0007ffffL, 0x7cffffffffffffffL, 0x3ff3dffffef7fffL
};
static final long[] jjbitVec37 = {
   0xf3ffffffffffffeeL, 0xffcfff1e3fffL, 0xd3c5fdfffff99feeL, 0x3ffcfb080399fL
};
static final long[] jjbitVec38 = {
   0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100003bbfL
};
static final long[] jjbitVec39 = {
   0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
};
static final long[] jjbitVec40 = {
   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
};
static final long[] jjbitVec41 = {
   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x0L, 0x0L
};
static final long[] jjbitVec42 = {
   0x7ff7ffffffffffeL, 0x3ff7fffL, 0x3bff6caefef02596L, 0x3ff3f5fL
};
static final long[] jjbitVec43 = {
   0xc2a003ff03000000L, 0xfffe03fffffffeffL, 0x2fe3ffffebf0fdfL, 0x0L
};
static final long[] jjbitVec44 = {
   0x0L, 0x0L, 0x0L, 0x21fff0000L
};
static final long[] jjbitVec45 = {
   0x3efffe000000a0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x77ffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 35;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffd9ffL & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                  }
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 39)
                     jjCheckNAddStates(10, 13);
                  else if (curChar == 34)
                     jjCheckNAddStates(14, 17);
                  else if (curChar == 35)
                  {
                     if (kind > 40)
                        kind = 40;
                     jjCheckNAdd(1);
                  }
                  break;
               case 35:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 33;
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 30);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 29;
                  if ((0x3ff600000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(27);
                  }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAdd(1);
                  break;
               case 4:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
               case 6:
                  if (curChar == 34)
                     jjCheckNAddStates(14, 17);
                  break;
               case 7:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 10:
                  if ((0xfffffffb00002600L & l) != 0L)
                     jjCheckNAddStates(14, 17);
                  break;
               case 11:
                  if (curChar == 34 && kind > 60)
                     kind = 60;
                  break;
               case 12:
               case 13:
                  if (curChar == 39)
                     jjCheckNAddStates(10, 13);
                  break;
               case 14:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 17:
                  if ((0xffffff7f00002600L & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  break;
               case 18:
                  if (curChar == 39 && kind > 60)
                     kind = 60;
                  break;
               case 19:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 21:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjAddStates(18, 19);
                  break;
               case 22:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 24:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 25:
                  if ((0xffffffffffffd9ffL & l) != 0L && kind > 85)
                     kind = 85;
                  break;
               case 27:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(27);
                  break;
               case 28:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 30);
                  break;
               case 29:
                  if (curChar == 42 && kind > 58)
                     kind = 58;
                  break;
               case 30:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 32:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 34:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjstateSet[jjnewStateCnt++] = 34;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 85)
                     kind = 85;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAddStates(20, 24);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(28, 30);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(27);
                  }
                  break;
               case 1:
                  if (kind > 40)
                     kind = 40;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(4);
                  break;
               case 10:
                  jjAddStates(14, 17);
                  break;
               case 17:
                  jjAddStates(10, 13);
                  break;
               case 20:
               case 21:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 23:
               case 24:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(24);
                  break;
               case 25:
                  if (kind > 85)
                     kind = 85;
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddStates(20, 24);
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(27);
                  break;
               case 28:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(28, 30);
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 33:
               case 34:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(34);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 85)
                        kind = 85;
                  }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAddStates(20, 24);
                  }
                  break;
               case 35:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(27);
                  }
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(28, 30);
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 1:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if (!jjCanMove_5(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(4);
                  break;
               case 8:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(14, 17);
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(14, 17);
                  break;
               case 15:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(10, 13);
                  break;
               case 17:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(10, 13);
                  break;
               case 20:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 21:
                  if (!jjCanMove_5(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 23:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(24);
                  break;
               case 24:
                  if (!jjCanMove_5(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(24);
                  break;
               case 25:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 85)
                     kind = 85;
                  break;
               case 26:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddStates(20, 24);
                  break;
               case 27:
                  if (!jjCanMove_5(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(27);
                  break;
               case 28:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(28, 30);
                  break;
               case 31:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 33:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(34);
                  break;
               case 34:
                  if (!jjCanMove_5(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(34);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 35 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(3, 0);
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 27;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0xffffffffffffd9ffL & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                  }
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(25, 32);
                  else if (curChar == 62)
                  {
                     if (kind > 83)
                        kind = 83;
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 62 && kind > 82)
                     kind = 82;
                  break;
               case 1:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if (curChar == 62 && kind > 83)
                     kind = 83;
                  break;
               case 4:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(25, 32);
                  break;
               case 5:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 7:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddStates(2, 5);
                  break;
               case 8:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 11:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 12:
                  if (curChar == 61)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 13:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
                  if (curChar == 34 && kind > 66)
                     kind = 66;
                  break;
               case 15:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 17:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddStates(36, 39);
                  break;
               case 18:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 20:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 21:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 22:
                  if (curChar == 61)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 23:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 24:
                  if (curChar == 39 && kind > 67)
                     kind = 67;
                  break;
               case 25:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(25, 1);
                  break;
               case 26:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(26, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (kind > 85)
                     kind = 85;
                  break;
               case 6:
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(2, 5);
                  break;
               case 9:
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 16:
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(36, 39);
                  break;
               case 19:
               case 20:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 85)
                     kind = 85;
                  break;
               case 6:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(2, 5);
                  break;
               case 7:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(2, 5);
                  break;
               case 9:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(33, 35);
                  break;
               case 10:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(33, 35);
                  break;
               case 16:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(36, 39);
                  break;
               case 17:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(36, 39);
                  break;
               case 19:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(40, 42);
                  break;
               case 20:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(40, 42);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 27 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 70;
            return 1;
         }
         return -1;
      case 1:
         if ((active1 & 0x800L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 70;
               jjmatchedPos = 0;
            }
            return 55;
         }
         return -1;
      case 2:
         if ((active1 & 0x800L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 70;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 60:
         return jjMoveStringLiteralDfa1_1(0x800L);
      case 93:
         return jjMoveStringLiteralDfa1_1(0x4000L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_1(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa2_1(active1, 0x800L);
      case 93:
         return jjMoveStringLiteralDfa2_1(active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_1(0, 0L, active1);
}
private final int jjMoveStringLiteralDfa2_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(0, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_1(active1, 0x800L);
      case 62:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(2, 78);
         break;
      default :
         break;
   }
   return jjStartNfa_1(1, 0L, active1);
}
private final int jjMoveStringLiteralDfa3_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(1, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(3, 75);
         break;
      default :
         break;
   }
   return jjStartNfa_1(2, 0L, active1);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 65;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 58;
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 55;
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 0:
                  if ((0xffffffffffffd9ffL & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                  }
                  if ((0xffffffff00002600L & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                  }
                  if ((0x1000004000000000L & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  if (curChar == 60)
                     jjAddStates(43, 45);
                  else if (curChar == 38)
                     jjAddStates(46, 47);
                  if (curChar == 38)
                     jjAddStates(48, 51);
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjAddStates(52, 53);
                  break;
               case 3:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 6:
                  if ((0x1000004000000000L & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 7:
                  if ((0xffffffff00002600L & l) != 0L && kind > 71)
                     kind = 71;
                  break;
               case 10:
                  if (curChar == 38)
                     jjAddStates(48, 51);
                  break;
               case 12:
                  if (curChar == 59 && kind > 74)
                     kind = 74;
                  break;
               case 24:
                  if ((0xffffffffffffd9ffL & l) != 0L && kind > 85)
                     kind = 85;
                  break;
               case 25:
                  if (curChar == 38)
                     jjAddStates(46, 47);
                  break;
               case 26:
                  if (curChar == 35)
                     jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if (curChar == 59 && kind > 72)
                     kind = 72;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(54, 55);
                  break;
               case 31:
                  if (curChar == 59 && kind > 73)
                     kind = 73;
                  break;
               case 32:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 33:
                  if (curChar == 60)
                     jjAddStates(43, 45);
                  break;
               case 34:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 36:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 37:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(59, 62);
                  break;
               case 38:
                  if ((0xffffffff00002600L & l) != 0L)
                     jjCheckNAddStates(63, 65);
                  break;
               case 41:
                  if (curChar == 62 && kind > 76)
                     kind = 76;
                  break;
               case 42:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 44:
                  if ((0xffffffff00002600L & l) != 0L)
                     jjAddStates(66, 68);
                  break;
               case 47:
                  if (curChar == 62 && kind > 77)
                     kind = 77;
                  break;
               case 56:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 59:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddStates(69, 72);
                  break;
               case 60:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 62:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddStates(73, 75);
                  break;
               case 63:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 64:
                  if (curChar == 62 && kind > 84)
                     kind = 84;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 0:
                  if (kind > 85)
                     kind = 85;
                  if (kind > 71)
                     kind = 71;
                  break;
               case 4:
               case 5:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(5);
                  break;
               case 7:
                  if (kind > 71)
                     kind = 71;
                  break;
               case 11:
                  if (curChar == 116)
                     jjCheckNAdd(12);
                  break;
               case 13:
                  if (curChar == 108)
                     jjCheckNAdd(11);
                  break;
               case 14:
                  if (curChar == 103)
                     jjCheckNAdd(11);
                  break;
               case 15:
                  if (curChar == 111)
                     jjCheckNAdd(11);
                  break;
               case 16:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 97)
                     jjAddStates(76, 77);
                  break;
               case 19:
                  if (curChar == 112)
                     jjCheckNAdd(12);
                  break;
               case 20:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 115)
                     jjCheckNAdd(12);
                  break;
               case 22:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (kind > 85)
                     kind = 85;
                  break;
               case 29:
                  if (curChar == 120)
                     jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 35:
               case 36:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 38:
                  jjCheckNAddStates(63, 65);
                  break;
               case 43:
                  if (curChar == 91)
                     jjCheckNAddStates(66, 68);
                  break;
               case 44:
                  jjCheckNAddStates(66, 68);
                  break;
               case 48:
                  if (curChar == 93)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 93)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 51:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 58:
               case 59:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(69, 72);
                  break;
               case 61:
               case 62:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(73, 75);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 71)
                        kind = 71;
                  }
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 9;
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 85)
                        kind = 85;
                  }
                  break;
               case 2:
                  if (!jjCanMove_5(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(5);
                  break;
               case 5:
                  if (!jjCanMove_5(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(5);
                  break;
               case 7:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 71)
                     kind = 71;
                  break;
               case 8:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2) && kind > 71)
                     kind = 71;
                  break;
               case 24:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 85)
                     kind = 85;
                  break;
               case 35:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(56, 58);
                  break;
               case 36:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(56, 58);
                  break;
               case 38:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(63, 65);
                  break;
               case 39:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(63, 65);
                  break;
               case 44:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(66, 68);
                  break;
               case 45:
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 46:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(66, 68);
                  break;
               case 58:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(69, 72);
                  break;
               case 59:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(69, 72);
                  break;
               case 61:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(73, 75);
                  break;
               case 62:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(73, 75);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 65 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0, long active1)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_5(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_5(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa1_5(0x18000L);
      default :
         return jjMoveNfa_5(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_5(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_5(active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_5(0, 0L, active1);
}
private final int jjMoveStringLiteralDfa2_5(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_5(0, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(2, 79);
         break;
      default :
         break;
   }
   return jjStartNfa_5(1, 0L, active1);
}
private final int jjMoveNfa_5(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffd9ffL & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                  }
                  if ((0xffffffff00002600L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                  }
                  break;
               case 3:
                  if ((0xffffffffffffd9ffL & l) != 0L && kind > 85)
                     kind = 85;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 85)
                     kind = 85;
                  if (kind > 81)
                     kind = 81;
                  break;
               case 3:
                  if (kind > 85)
                     kind = 85;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 81)
                        kind = 81;
                  }
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 2;
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 85)
                        kind = 85;
                  }
                  break;
               case 1:
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if (jjCanMove_17(hiByte, i1, i2, l1, l2) && kind > 81)
                     kind = 81;
                  break;
               case 3:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 85)
                     kind = 85;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 68);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 27;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffd9ffL & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                  }
                  if ((0xffffffff00002600L & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                  }
                  if ((0x1000004000000000L & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  if (curChar == 38)
                     jjAddStates(0, 1);
                  if (curChar == 38)
                     jjAddStates(2, 5);
                  break;
               case 1:
                  if ((0xffffffff00002600L & l) != 0L && kind > 71)
                     kind = 71;
                  break;
               case 4:
                  if (curChar == 38)
                     jjAddStates(2, 5);
                  break;
               case 6:
                  if (curChar == 59 && kind > 74)
                     kind = 74;
                  break;
               case 18:
                  if ((0xffffffffffffd9ffL & l) != 0L && kind > 85)
                     kind = 85;
                  break;
               case 19:
                  if (curChar == 38)
                     jjAddStates(0, 1);
                  break;
               case 20:
                  if (curChar == 35)
                     jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 22:
                  if (curChar == 59 && kind > 72)
                     kind = 72;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(6, 7);
                  break;
               case 25:
                  if (curChar == 59 && kind > 73)
                     kind = 73;
                  break;
               case 26:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 85)
                     kind = 85;
                  if (kind > 71)
                     kind = 71;
                  break;
               case 1:
                  if (kind > 71)
                     kind = 71;
                  break;
               case 5:
                  if (curChar == 116)
                     jjCheckNAdd(6);
                  break;
               case 7:
                  if (curChar == 108)
                     jjCheckNAdd(5);
                  break;
               case 8:
                  if (curChar == 103)
                     jjCheckNAdd(5);
                  break;
               case 9:
                  if (curChar == 111)
                     jjCheckNAdd(5);
                  break;
               case 10:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 97)
                     jjAddStates(8, 9);
                  break;
               case 13:
                  if (curChar == 112)
                     jjCheckNAdd(6);
                  break;
               case 14:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 115)
                     jjCheckNAdd(6);
                  break;
               case 16:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (kind > 85)
                     kind = 85;
                  break;
               case 23:
                  if (curChar == 120)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 71)
                        kind = 71;
                  }
                  if (jjCanMove_18(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 3;
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 85)
                        kind = 85;
                  }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 71)
                     kind = 71;
                  break;
               case 2:
                  if (jjCanMove_18(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if (jjCanMove_19(hiByte, i1, i2, l1, l2) && kind > 71)
                     kind = 71;
                  break;
               case 18:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 85)
                     kind = 85;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 27 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   20, 26, 7, 8, 11, 12, 24, 25, 14, 17, 14, 15, 17, 18, 7, 8, 
   10, 11, 21, 22, 27, 28, 30, 31, 32, 5, 6, 15, 16, 25, 1, 26, 
   2, 10, 11, 12, 17, 18, 21, 22, 20, 21, 22, 34, 56, 57, 26, 32, 
   13, 14, 17, 18, 2, 3, 30, 31, 36, 37, 42, 37, 38, 39, 42, 38, 
   39, 42, 44, 45, 49, 59, 60, 63, 64, 62, 63, 64, 20, 23, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec3[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default : 
         if ((jjbitVec4[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default : 
         if ((jjbitVec5[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec6[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec30[i2] & l2) != 0L);
      default : 
         if ((jjbitVec7[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec30[i2] & l2) != 0L);
      default : 
         if ((jjbitVec7[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_6(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default : 
         if ((jjbitVec4[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_7(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default : 
         if ((jjbitVec5[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_8(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default : 
         if ((jjbitVec4[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_9(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default : 
         if ((jjbitVec5[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_10(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default : 
         if ((jjbitVec4[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_11(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default : 
         if ((jjbitVec5[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_12(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default : 
         if ((jjbitVec4[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_13(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default : 
         if ((jjbitVec5[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_14(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default : 
         if ((jjbitVec4[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_15(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default : 
         if ((jjbitVec5[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_16(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default : 
         if ((jjbitVec4[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_17(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default : 
         if ((jjbitVec5[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_18(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default : 
         if ((jjbitVec4[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_19(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default : 
         if ((jjbitVec5[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", "\156\141\155\145\163\160\141\143\145", "\144\145\146\141\165\154\164", 
"\75", "\151\156\150\145\162\151\164", "\144\141\164\141\164\171\160\145\163", 
"\145\155\160\164\171", "\164\145\170\164", "\156\157\164\101\154\154\157\167\145\144", "\174", "\46", 
"\54", "\53", "\77", "\52", "\145\154\145\155\145\156\164", "\173", "\175", 
"\141\164\164\162\151\142\165\164\145", "\50", "\51", "\55", "\154\151\163\164", "\155\151\170\145\144", 
"\147\162\141\155\155\141\162", "\163\164\141\162\164", "\174\75", "\46\75", "\151\156\143\154\165\144\145", 
"\145\170\164\145\162\156\141\154\122\145\146", "\160\141\162\145\156\164", "\163\164\162\151\156\147", 
"\164\157\153\145\156", "\133", "\135", "\76\76", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\ufeff", null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "CONTENT", 
   "STAG", 
   "LIT", 
   "LITA", 
   "COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 3, 4, 2, 2, -1, -1, -1, -1, -1, 
   5, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 
};
static final long[] jjtoToken = {
   0x3f00000fffffffffL, 0x3d4040L, 
};
static final long[] jjtoSkip = {
   0x1f000000000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x10000000000L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x2bfbdL, 
};
private UCode_CharStream input_stream;
private final int[] jjrounds = new int[65];
private final int[] jjstateSet = new int[130];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public NonXmlSyntaxTokenManager(UCode_CharStream stream)
{
   if (UCode_CharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public NonXmlSyntaxTokenManager(UCode_CharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(UCode_CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 65; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(UCode_CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 6 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 13 && (0x2600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
           }
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

final void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 82 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    SwitchTo(tagLevel == 0 ? DEFAULT : CONTENT);
         break;
      case 83 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                 tagLevel++;
         break;
      case 84 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      SwitchTo(--tagLevel == 0 ? DEFAULT : CONTENT);
         break;
      default : 
         break;
   }
}
}
