/* Generated By:JavaCC: Do not edit this line. NonXmlSyntax.java */
package com.thaiopensource.relaxng.nonxml;

import java.util.Hashtable;
import java.util.Enumeration;
import java.util.Vector;

public class NonXmlSyntax implements NonXmlSyntaxConstants {

  private static class AnnotationsImpl implements Annotations {
    private Vector attributes = new Vector();
    private Vector childElements = new Vector();
    private Vector followingElements = new Vector();
    public boolean empty() {
      return (attributes.size() == 0
              && childElements.size() == 0
              && followingElements.size() == 0);
    }
    public int getAttributeCount() {
      return attributes.size()/3;
    }
    public String getAttributeNamespace(int i) {
      return (String)attributes.elementAt(i*3);
    }
    public String getAttributeName(int i) {
      return (String)attributes.elementAt(i*3 + 1);
    }
    public String getAttributeValue(int i) {
      return (String)attributes.elementAt(i*3 + 2);
    }
    void addAttribute(String ns, String name, String value) {
      attributes.addElement(ns);
      attributes.addElement(name);
      attributes.addElement(value);
    }
    public int getFollowingElementCount() {
      return followingElements.size();
    }
    public String getFollowingElement(int i) {
      return (String)followingElements.elementAt(i);
    }
    void addFollowingElement(String s) {
     followingElements.addElement(s);
    }
    public int getChildElementCount() {
      return childElements.size();
    }
    public String getChildElement(int i) {
      return (String)childElements.elementAt(i);
    }
    void addChildElement(String s) {
     childElements.addElement(s);
    }
  }

  private static final String xmlUri = "http://www.w3.org/XML/1998/namespace";
  private static final String INHERIT = "#inherit";
  private String defaultNamespace = INHERIT;
  private SchemaBuilder sb;
  private Hashtable namespaceTable = new Hashtable();
  private Hashtable datatypesTable = new Hashtable();
  private static String unquote(String s) {
    char quoteChar = s.charAt(0);
    s = s.substring(1, s.length() - 1);
    for (int i = 0; (i = s.indexOf(quoteChar, i)) >= 0; i++)
      s = s.substring(0, i) + s.substring(i + 1);
    return s;
  }
  private static String normalizeNewlines(String str) {
    int i = str.indexOf('\r');
    if (i < 0)
      return str;
    StringBuffer buf = new StringBuffer();
    for (i = 0; i < str.length(); i++) {
      char c = str.charAt(i);
      if (c == '\r') {
        buf.append('\n');
        if (i + 1 < str.length() && str.charAt(i + 1) == '\n')
          i++;
      }
      else
        buf.append(c);
    }
    return buf.toString();
  }
  public String getPreferredNamespace() {
    if (defaultNamespace == INHERIT)
      return null;
    return defaultNamespace;
  }
  private void emitNamespaceDecls(boolean end) {
    for (Enumeration prefixes = namespaceTable.keys(); prefixes.hasMoreElements();) {
      String prefix = (String)prefixes.nextElement();
      String ns = (String)namespaceTable.get(prefix);
      if (ns != INHERIT && ns.length() != 0 && !prefix.equals("xml")) {
        if (end)
          sb.endPrefixBinding();
        else
          sb.startPrefixBinding(prefix, ns);
      }
    }
  }

  final public void Input(SchemaBuilder sb) throws ParseException, SyntaxException {
    this.sb = sb;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BYTE_ORDER_MARK:
      jj_consume_token(BYTE_ORDER_MARK);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    Preamble();
    emitNamespaceDecls(false);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 25:
    case 28:
    case 33:
    case 35:
    case IDENTIFIER:
    case ESCAPED_IDENTIFIER:
    case EMPTY_ELEMENT:
    case START_TAG:
      TopLevelGrammar();
      break;
    case 6:
    case 7:
    case 8:
    case 15:
    case 18:
    case 19:
    case 22:
    case 23:
    case 24:
    case 29:
    case 30:
    case 31:
    case 32:
    case PREFIXED_NAME:
    case LITERAL:
      Expr();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    emitNamespaceDecls(true);
    jj_consume_token(0);
  }

  final public void TopLevelGrammar() throws ParseException, SyntaxException {
  Annotations a;
    a = Annotations();
    sb.grammar(a);
    label_1:
    while (true) {
      GrammarComponent();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
      case 28:
      case IDENTIFIER:
      case ESCAPED_IDENTIFIER:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
    }
    sb.finishGrammar();
  }

  final public void Preamble() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 5:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
        NamespaceDecl();
        break;
      case 5:
        DatatypesDecl();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    namespaceTable.put("xml", xmlUri);
  }

  final public void NamespaceDecl() throws ParseException {
  String prefix = null;
  boolean isDefault = false;
  String namespaceName;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 1:
      jj_consume_token(1);
      prefix = UnprefixedName();
      break;
    case 2:
      jj_consume_token(2);
                   isDefault = true;
      jj_consume_token(1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 15:
      case 18:
      case 22:
      case 23:
      case 24:
      case 25:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case IDENTIFIER:
      case ESCAPED_IDENTIFIER:
        prefix = UnprefixedName();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(3);
    namespaceName = NamespaceName();
    if (isDefault)
      defaultNamespace = namespaceName;
    if (prefix != null)
      namespaceTable.put(prefix, namespaceName);
  }

  final public String NamespaceName() throws ParseException {
  String r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LITERAL:
      r = Literal();
      break;
    case 4:
      jj_consume_token(4);
                               r = INHERIT;
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public void DatatypesDecl() throws ParseException {
  String prefix;
  String uri;
    jj_consume_token(5);
    prefix = UnprefixedName();
    jj_consume_token(3);
    uri = Literal();
    datatypesTable.put(prefix, uri);
  }

  final public void PrimaryExpr() throws ParseException, SyntaxException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      ElementExpr();
      break;
    case 18:
      AttributeExpr();
      break;
    case 24:
      GrammarExpr();
      break;
    case 29:
      ExternalRefExpr();
      break;
    case 22:
      ListExpr();
      break;
    case 23:
      MixedExpr();
      break;
    case 19:
      ParenExpr();
      break;
    case IDENTIFIER:
    case ESCAPED_IDENTIFIER:
      IdentifierExpr();
      break;
    case 30:
      ParentExpr();
      break;
    case 31:
    case 32:
    case PREFIXED_NAME:
      DataExpr();
      break;
    case LITERAL:
      ValueExpr();
      break;
    case 7:
      TextExpr();
      break;
    case 6:
      EmptyExpr();
      break;
    case 8:
      NotAllowedExpr();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void EmptyExpr() throws ParseException, SyntaxException {
  Annotations a;
    jj_consume_token(6);
    a = Annotations();
    sb.empty(a);
  }

  final public void TextExpr() throws ParseException, SyntaxException {
  Annotations a;
    jj_consume_token(7);
    a = Annotations();
    sb.text(a);
  }

  final public void NotAllowedExpr() throws ParseException, SyntaxException {
  Annotations a;
    jj_consume_token(8);
    a = Annotations();
    sb.notAllowed(a);
  }

  final public void Expr() throws ParseException, SyntaxException {
    UnaryExpr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 9:
    case 10:
    case 11:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
        label_3:
        while (true) {
          jj_consume_token(9);
          UnaryExpr();
                      sb.choice();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 9:
            ;
            break;
          default:
            jj_la1[9] = jj_gen;
            break label_3;
          }
        }
        break;
      case 10:
        label_4:
        while (true) {
          jj_consume_token(10);
          UnaryExpr();
                         sb.interleave();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 10:
            ;
            break;
          default:
            jj_la1[10] = jj_gen;
            break label_4;
          }
        }
        break;
      case 11:
        label_5:
        while (true) {
          jj_consume_token(11);
          UnaryExpr();
                         sb.group();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 11:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_5;
          }
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

  final public void UnaryExpr() throws ParseException, SyntaxException {
    PrimaryExpr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
    case 13:
    case 14:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 12:
        jj_consume_token(12);
         sb.oneOrMore();
        break;
      case 13:
        jj_consume_token(13);
           sb.optional();
        break;
      case 14:
        jj_consume_token(14);
           sb.zeroOrMore();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

  final public void ElementExpr() throws ParseException, SyntaxException {
  Annotations a;
    jj_consume_token(15);
    NameClass(false);
    a = Annotations();
    jj_consume_token(16);
    Expr();
    jj_consume_token(17);
    sb.element(a);
  }

  final public void AttributeExpr() throws ParseException, SyntaxException {
  Annotations a;
    jj_consume_token(18);
    NameClass(true);
    a = Annotations();
    jj_consume_token(16);
    Expr();
    jj_consume_token(17);
    sb.attribute(a);
  }

  final public void NameClass(boolean inAttribute) throws ParseException, SyntaxException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 15:
    case 18:
    case 19:
    case 22:
    case 23:
    case 24:
    case 25:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case IDENTIFIER:
    case ESCAPED_IDENTIFIER:
    case PREFIXED_NAME:
      PrimaryNameClass(inAttribute);
      NameClassAlternatives(inAttribute);
      break;
    case 14:
      AnyNameExceptClass(inAttribute);
      break;
    case PREFIX_STAR:
      NsNameExceptClass(inAttribute);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NameClassAlternatives(boolean inAttribute) throws ParseException, SyntaxException {
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_6;
      }
      jj_consume_token(9);
      BasicNameClass(inAttribute);
                                     sb.choice();
    }
  }

  final public void BasicNameClass(boolean inAttribute) throws ParseException, SyntaxException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 15:
    case 18:
    case 19:
    case 22:
    case 23:
    case 24:
    case 25:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case IDENTIFIER:
    case ESCAPED_IDENTIFIER:
    case PREFIXED_NAME:
      PrimaryNameClass(inAttribute);
      break;
    case 14:
    case PREFIX_STAR:
      OpenNameClass();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PrimaryNameClass(boolean inAttribute) throws ParseException, SyntaxException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 15:
    case 18:
    case 22:
    case 23:
    case 24:
    case 25:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case IDENTIFIER:
    case ESCAPED_IDENTIFIER:
      UnprefixedNameClass(inAttribute);
      break;
    case PREFIXED_NAME:
      PrefixedNameClass();
      break;
    case 19:
      ParenNameClass(inAttribute);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OpenNameClass() throws ParseException, SyntaxException {
  String ns;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PREFIX_STAR:
      ns = NsName();
                  sb.nsName(ns);
      break;
    case 14:
      jj_consume_token(14);
          sb.anyName();
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void UnprefixedNameClass(boolean inAttribute) throws ParseException {
  String name;
    name = UnprefixedName();
    String ns;
    if (inAttribute)
      ns = "";
    else if (defaultNamespace == INHERIT)
      ns = null;
    else
      ns = defaultNamespace;
    sb.name(ns, name);
  }

  final public void PrefixedNameClass() throws ParseException, SyntaxException {
  Token t;
    t = jj_consume_token(PREFIXED_NAME);
    String qn = t.image;
    int colon = qn.indexOf(':');
    String prefix = qn.substring(0, colon);
    String ns = (String)namespaceTable.get(prefix);
    if (ns == null)
      {if (true) throw new UndeclaredPrefixException(prefix, t);}
    if (ns == INHERIT)
      sb.name(null, qn.substring(colon + 1));
    else if (ns.length() == 0)
      sb.name(ns, qn.substring(colon + 1));
    else
      sb.prefixedName(ns, qn);
  }

  final public void NsNameExceptClass(boolean inAttribute) throws ParseException, SyntaxException {
  String ns;
    ns = NsName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 21:
      ExceptNameClass(inAttribute);
                                   sb.nsNameExcept(ns);
      break;
    default:
      jj_la1[21] = jj_gen;
         sb.nsName(ns);
      NameClassAlternatives(inAttribute);
    }
  }

  final public String NsName() throws ParseException, SyntaxException {
  Token t;
    t = jj_consume_token(PREFIX_STAR);
    String qn = t.image;
    String prefix = qn.substring(0, qn.length() - 2);
    String ns = (String)namespaceTable.get(prefix);
    if (ns == null)
      {if (true) throw new UndeclaredPrefixException(prefix, t);}
    {if (true) return ns == INHERIT ? null : ns;}
    throw new Error("Missing return statement in function");
  }

  final public void AnyNameExceptClass(boolean inAttribute) throws ParseException, SyntaxException {
    jj_consume_token(14);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 21:
      ExceptNameClass(inAttribute);
                                  sb.anyNameExcept();
      break;
    default:
      jj_la1[22] = jj_gen;
        sb.anyName();
      NameClassAlternatives(inAttribute);
    }
  }

  final public void ParenNameClass(boolean inAttribute) throws ParseException, SyntaxException {
    jj_consume_token(19);
    NameClass(inAttribute);
    jj_consume_token(20);
  }

  final public void ExceptNameClass(boolean inAttribute) throws ParseException, SyntaxException {
    jj_consume_token(21);
    BasicNameClass(inAttribute);
  }

  final public void ListExpr() throws ParseException, SyntaxException {
  Annotations a;
    jj_consume_token(22);
    a = Annotations();
    jj_consume_token(16);
    Expr();
    jj_consume_token(17);
    sb.list(a);
  }

  final public void MixedExpr() throws ParseException, SyntaxException {
  Annotations a;
    jj_consume_token(23);
    a = Annotations();
    jj_consume_token(16);
    Expr();
    jj_consume_token(17);
    sb.mixed(a);
  }

  final public void GrammarExpr() throws ParseException, SyntaxException {
  Annotations a;
    jj_consume_token(24);
    a = Annotations();
                                sb.grammar(a);
    jj_consume_token(16);
    label_7:
    while (true) {
      GrammarComponent();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
      case 28:
      case IDENTIFIER:
      case ESCAPED_IDENTIFIER:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_7;
      }
    }
    jj_consume_token(17);
  }

  final public void ParenExpr() throws ParseException, SyntaxException {
  Annotations a;
    jj_consume_token(19);
    a = Annotations();
    Expr();
    jj_consume_token(20);
    sb.annotate(a);
  }

  final public void GrammarComponent() throws ParseException, SyntaxException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 25:
    case IDENTIFIER:
    case ESCAPED_IDENTIFIER:
      Definition();
      break;
    case 28:
      Include();
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Definition() throws ParseException, SyntaxException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case ESCAPED_IDENTIFIER:
      Define();
      break;
    case 25:
      Start();
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Start() throws ParseException, SyntaxException {
  Annotations a;
  int combine;
    jj_consume_token(25);
    a = Annotations();
    combine = AssignOp();
    Expr();
    sb.start(a, combine);
  }

  final public void Define() throws ParseException, SyntaxException {
  String name;
  Annotations a;
  int combine;
    name = Identifier();
    a = Annotations();
    combine = AssignOp();
    Expr();
    sb.define(name, a, combine);
  }

  final public int AssignOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 3:
      jj_consume_token(3);
        {if (true) return SchemaBuilder.COMBINE_NONE;}
      break;
    case 26:
      jj_consume_token(26);
           {if (true) return SchemaBuilder.COMBINE_CHOICE;}
      break;
    case 27:
      jj_consume_token(27);
           {if (true) return SchemaBuilder.COMBINE_INTERLEAVE;}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void Include() throws ParseException, SyntaxException {
  String href;
  String ns;
  Annotations a;
    jj_consume_token(28);
    href = Literal();
    ns = Inherit();
    a = Annotations();
    sb.include(href, null, ns, a);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 16:
      jj_consume_token(16);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 25:
        case IDENTIFIER:
        case ESCAPED_IDENTIFIER:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_8;
        }
        Definition();
      }
      jj_consume_token(17);
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    sb.finishInclude();
  }

  final public void ExternalRefExpr() throws ParseException, SyntaxException {
  String href;
  String ns;
  Annotations a;
    jj_consume_token(29);
    href = Literal();
    ns = Inherit();
    a = Annotations();
    sb.externalRef(href, null, ns, a);
  }

  final public String Inherit() throws ParseException, SyntaxException {
  String ns = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 4:
      jj_consume_token(4);
      jj_consume_token(3);
      ns = Prefix();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    if (ns == null)
      ns = defaultNamespace;
    if (ns == INHERIT)
      ns = null;
    {if (true) return ns;}
    throw new Error("Missing return statement in function");
  }

  final public void ParentExpr() throws ParseException, SyntaxException {
  String name;
  Annotations a;
    jj_consume_token(30);
    name = Identifier();
    a = Annotations();
    sb.parentRef(name, a);
  }

  final public void IdentifierExpr() throws ParseException, SyntaxException {
  String name;
  Annotations a;
    name = Identifier();
    a = Annotations();
    sb.ref(name, a);
  }

  final public void ValueExpr() throws ParseException, SyntaxException {
  String s;
  Annotations a;
    s = Literal();
    a = NoChildAnnotations();
    sb.value("", "token", s, null, a);
  }

  final public void DataExpr() throws ParseException, SyntaxException {
  Token datatypeToken;
  String datatype;
  String datatypeUri = null;
  String s = null;
  Annotations a;
    datatypeToken = DatatypeName();
    datatype = datatypeToken.image;
    int colon = datatype.indexOf(':');
    if (colon < 0)
      datatypeUri = "";
    else {
      String prefix = datatype.substring(0, colon);
      datatypeUri = (String)datatypesTable.get(prefix);
      if (datatypeUri == null)
        {if (true) throw new UndeclaredPrefixException(prefix, datatypeToken);}
      datatype = datatype.substring(colon + 1);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LITERAL:
      s = Literal();
      a = NoChildAnnotations();
      String ns;
      if (defaultNamespace == INHERIT)
        ns = null;
      else
        ns = defaultNamespace;
      sb.value(datatypeUri, datatype, s, ns, a);
      break;
    default:
      jj_la1[33] = jj_gen;
      a = Annotations();
        sb.data(datatypeUri, datatype, a);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        Params();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 21:
          Except();
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[32] = jj_gen;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 21:
          Except();
          break;
        default:
          jj_la1[31] = jj_gen;
          ;
        }
      }
        sb.finishData();
    }
  }

  final public Token DatatypeName() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      t = jj_consume_token(31);
      break;
    case 32:
      t = jj_consume_token(32);
      break;
    case PREFIXED_NAME:
      t = jj_consume_token(PREFIXED_NAME);
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public String Identifier() throws ParseException {
  String s;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                      s = t.image;
      break;
    case ESCAPED_IDENTIFIER:
      t = jj_consume_token(ESCAPED_IDENTIFIER);
                               s = t.image.substring(1);
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String Prefix() throws ParseException, SyntaxException {
  Token t;
  String prefix;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                      prefix = t.image;
      break;
    case ESCAPED_IDENTIFIER:
      t = jj_consume_token(ESCAPED_IDENTIFIER);
                               prefix = t.image.substring(1);
      break;
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 15:
    case 18:
    case 22:
    case 23:
    case 24:
    case 25:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      t = Keyword();
                    prefix = t.image;
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    String ns = (String)namespaceTable.get(prefix);
    if (ns == null)
      {if (true) throw new UndeclaredPrefixException(prefix, t);}
    {if (true) return ns;}
    throw new Error("Missing return statement in function");
  }

  final public String UnprefixedName() throws ParseException {
  String s;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case ESCAPED_IDENTIFIER:
      s = Identifier();
      break;
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 15:
    case 18:
    case 22:
    case 23:
    case 24:
    case 25:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      t = Keyword();
                     s = t.image;
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public void Params() throws ParseException, SyntaxException {
    jj_consume_token(16);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 15:
      case 18:
      case 22:
      case 23:
      case 24:
      case 25:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case IDENTIFIER:
      case ESCAPED_IDENTIFIER:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_9;
      }
      Param();
    }
    jj_consume_token(17);
  }

  final public void Param() throws ParseException, SyntaxException {
  String name;
  Annotations a;
  String value;
    name = UnprefixedName();
    a = NoChildAnnotations();
    jj_consume_token(3);
    value = Literal();
    sb.param(name, a, value);
  }

  final public void Except() throws ParseException, SyntaxException {
    jj_consume_token(21);
    PrimaryExpr();
    sb.dataExcept();
  }

  final public Annotations Annotations() throws ParseException, SyntaxException {
  AnnotationsImpl a = new AnnotationsImpl();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 33:
      jj_consume_token(33);
      label_10:
      while (true) {
        AnnotationAttribute(a);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PREFIXED_NAME:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          break label_10;
        }
      }
      jj_consume_token(34);
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EMPTY_ELEMENT:
      case START_TAG:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_11;
      }
      ExtensionElement(a, false);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 35:
      jj_consume_token(35);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EMPTY_ELEMENT:
        case START_TAG:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_12;
        }
        ExtensionElement(a, true);
      }
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Annotations NoChildAnnotations() throws ParseException, SyntaxException {
  AnnotationsImpl a = new AnnotationsImpl();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 33:
      jj_consume_token(33);
      label_13:
      while (true) {
        AnnotationAttribute(a);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PREFIXED_NAME:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_13;
        }
      }
      jj_consume_token(34);
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 35:
      jj_consume_token(35);
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EMPTY_ELEMENT:
      case START_TAG:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_14;
      }
      ExtensionElement(a, true);
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public void AnnotationAttribute(AnnotationsImpl a) throws ParseException, SyntaxException {
  Token t;
  String value;
    t = jj_consume_token(PREFIXED_NAME);
    jj_consume_token(3);
    value = Literal();
    String qn = t.image;
    int colon = qn.indexOf(':');
    String prefix = qn.substring(0, colon);
    String ns = (String)namespaceTable.get(prefix);
    if (ns == null)
      {if (true) throw new UndeclaredPrefixException(prefix, t);}
    if (ns == INHERIT || ns.length() == 0)
      {if (true) throw new BadAnnotationPrefixException(prefix, t);}
    a.addAttribute(ns, qn, value);
  }

  final public void ExtensionElement(AnnotationsImpl a, boolean isFollowing) throws ParseException, SyntaxException {
  StringBuffer buf = new StringBuffer();
    Element(buf);
    String e = buf.toString();
    e = normalizeNewlines(e);
    if (isFollowing)
      a.addFollowingElement(e);
    else
      a.addChildElement(e);
  }

  final public void Element(StringBuffer buf) throws ParseException, SyntaxException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EMPTY_ELEMENT:
      t = jj_consume_token(EMPTY_ELEMENT);
    buf.append(t.image);
      break;
    case START_TAG:
      t = jj_consume_token(START_TAG);
                       buf.append(t.image);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EMPTY_ELEMENT:
        case START_TAG:
          ;
          break;
        default:
          jj_la1[48] = jj_gen;
          break label_15;
        }
        Element(buf);
      }
      t = jj_consume_token(END_TAG);
                     buf.append(t.image);
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public String Literal() throws ParseException {
  Token t;
    t = jj_consume_token(LITERAL);
    {if (true) return normalizeNewlines(unquote(t.image));}
    throw new Error("Missing return statement in function");
  }

  final public Token Keyword() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      t = jj_consume_token(15);
      break;
    case 18:
      t = jj_consume_token(18);
      break;
    case 1:
      t = jj_consume_token(1);
      break;
    case 22:
      t = jj_consume_token(22);
      break;
    case 23:
      t = jj_consume_token(23);
      break;
    case 24:
      t = jj_consume_token(24);
      break;
    case 6:
      t = jj_consume_token(6);
      break;
    case 7:
      t = jj_consume_token(7);
      break;
    case 30:
      t = jj_consume_token(30);
      break;
    case 29:
      t = jj_consume_token(29);
      break;
    case 8:
      t = jj_consume_token(8);
      break;
    case 25:
      t = jj_consume_token(25);
      break;
    case 28:
      t = jj_consume_token(28);
      break;
    case 2:
      t = jj_consume_token(2);
      break;
    case 4:
      t = jj_consume_token(4);
      break;
    case 31:
      t = jj_consume_token(31);
      break;
    case 32:
      t = jj_consume_token(32);
      break;
    case 5:
      t = jj_consume_token(5);
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  public NonXmlSyntaxTokenManager token_source;
  UCode_CharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[51];
  final private int[] jj_la1_0 = {0x0,0xf3cc81c0,0x12000000,0x26,0x26,0xf3c481f6,0x6,0x10,0xe1cc81c0,0x200,0x400,0x800,0xe00,0xe00,0x7000,0x7000,0xf3ccc1f6,0x200,0xf3ccc1f6,0xf3cc81f6,0x4000,0x200000,0x200000,0x12000000,0x12000000,0x2000000,0xc000008,0x2000000,0x10000,0x10,0x200000,0x200000,0x10000,0x0,0x80000000,0x0,0xf3c481f6,0xf3c481f6,0xf3c481f6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf3c481f6,};
  final private int[] jj_la1_1 = {0x20000000,0x1b00000b,0x3000000,0x0,0x0,0x3000001,0x0,0x10000000,0x1b000001,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf000001,0x0,0xf000001,0xb000001,0x4000000,0x0,0x0,0x3000000,0x3000000,0x3000000,0x0,0x3000000,0x0,0x0,0x0,0x0,0x0,0x10000000,0x8000001,0x3000000,0x3000001,0x3000001,0x3000001,0x8000000,0x2,0x0,0x0,0x8,0x8000000,0x2,0x8,0x0,0x0,0x0,0x1,};
  final private int[] jj_la1_2 = {0x0,0xc0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0000,0xc0000,0x0,0x0,0x0,0x0,0xc0000,0xc0000,0xc0000,0x0,};

  public NonXmlSyntax(java.io.InputStream stream) {
    jj_input_stream = new UCode_CharStream(stream, 1, 1);
    token_source = new NonXmlSyntaxTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  public NonXmlSyntax(java.io.Reader stream) {
    jj_input_stream = new UCode_CharStream(stream, 1, 1);
    token_source = new NonXmlSyntaxTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  public NonXmlSyntax(NonXmlSyntaxTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  public void ReInit(NonXmlSyntaxTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[86];
    for (int i = 0; i < 86; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 51; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 86; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
